name: Deployment Pipeline

env:
    ARTIFACT_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
    IMAGE_REPO_URL: "$ARTIFACT_REGISTRY/${{ secrets.GCP_PROJECT_ID }}"

on:
  workflow_dispatch:
  push:
    branches:
      - core/*

jobs:
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  image-api:
    name: "API: Construct Metadata, Checkout Code, Build Image and Push"
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{  steps.metadata.outputs.SERVICE_NAME  }}
      SERVICE_REVISION_SUFFIX: ${{ steps.metadata.outputs.SERVICE_REVISION_SUFFIX }}
      ENVIRONMENT: ${{ steps.metadata.outputs.ENVIRONMENT }}
      IMAGE_URI: ${{ steps.metadata.outputs.IMAGE_URI }}
    steps:
      - name: Extract information and construct metadata
        id: metadata
        run: |
          account_url="https://github.com/${{ vars.REPO_OWNER }}"
          repo_url="$account_url/${{ vars.REPO_NAME_API }}.git"

          IMAGE_NAME="api"
          TAG="$(git ls-remote --tags $repo_url | sort -u -r | head -n 1 | grep -o "v.*")"

          if echo $TAG | grep -q "alpha"; then
              REPO_BRANCH="alpha"
              ENVIRONMENT="alpha"
              DEPLOYMENT_FOR="alpha testing environment"
          else
              REPO_BRANCH="main"
              ENVIRONMENT="production"
              DEPLOYMENT_FOR="production environment"
          fi

          IMAGE_NAME_TAG="$IMAGE_NAME:$TAG"
          IMAGE_URI="${{ env.IMAGE_REPO_URL }}/$ENVIRONMENT/$IMAGE_NAME_TAG"
          SERVICE_NAME="$IMAGE_NAME-$ENVIRONMENT"
          SERVICE_REVISION_SUFFIX="$TAG"

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME_TAG=$IMAGE_NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "REPO_BRANCH=$REPO_BRANCH" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "SERVICE_REVISION_SUFFIX=$SERVICE_REVISION_SUFFIX" >> "$GITHUB_OUTPUT"

          echo "GitHub repo owner                   : ${{  vars.REPO_OWNER  }}"
          echo "GitHub repo                         : ${{  vars.REPO_NAME_API  }}"
          echo "GitHub extracted latest tag         : $TAG"
          echo "GitHub repo branch to checkout      : $REPO_BRANCH"
          echo "Deployment for                      : $DEPLOYMENT_FOR"
          echo "GCP Artifact Registry repo to push  : $ENVIRONMENT"
          echo "Container image name                : $IMAGE_NAME"
          echo "Container image nametag             : $IMAGE_NAME_TAG"
          echo "Service name                        : $SERVICE_NAME"
          echo "Service revision suffix             : $SERVICE_REVISION_SUFFIX"
          echo "Service container port to expose    : ${{  vars.CONTAINER_PORT_API  }}"
      ######################################################################### 
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_API }}
          ref: ${{ steps.metadata.outputs.REPO_BRANCH }}
          path: ${{ vars.REPO_NAME_API }}
        #######################################################################
      - name: Build Docker Image
        run: |
          cd ${{ vars.REPO_NAME_API }}
          docker build -t ${{ steps.metadata.outputs.IMAGE_URI }} ./api_service
        #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        #######################################################################
      - name: Push to Artifact Registry
        run: |
          docker push ${{ steps.metadata.outputs.IMAGE_URI }}
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  image-client:
    name: "Client: Construct Metadata, Checkout Code, Build Image and Push"
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{  steps.metadata.outputs.SERVICE_NAME  }}
      SERVICE_REVISION_SUFFIX: ${{ steps.metadata.outputs.SERVICE_REVISION_SUFFIX }}
      ENVIRONMENT: ${{ steps.metadata.outputs.ENVIRONMENT }}
      IMAGE_URI: ${{ steps.metadata.outputs.IMAGE_URI }}
    steps:
      - name: Extract information and construct metadata
        id: metadata
        run: |
          account_url="https://github.com/${{ vars.REPO_OWNER }}"
          repo_url="$account_url/${{ vars.REPO_NAME_CLIENT }}.git"

          IMAGE_NAME="client"
          TAG="$(git ls-remote --tags $repo_url | sort -u -r | head -n 1 | grep -o "v.*")"

          if echo $TAG | grep -q "alpha"; then
              REPO_BRANCH="alpha"
              ENVIRONMENT="alpha"
              DEPLOYMENT_FOR="alpha testing environment"
          else
              REPO_BRANCH="main"
              ENVIRONMENT="production"
              DEPLOYMENT_FOR="production environment"
          fi

          IMAGE_NAME_TAG="$IMAGE_NAME:$TAG"
          IMAGE_URI="${{ env.IMAGE_REPO_URL }}/$ENVIRONMENT/$IMAGE_NAME_TAG"
          SERVICE_NAME="$IMAGE_NAME-$ENVIRONMENT"
          SERVICE_REVISION_SUFFIX="$TAG"

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME_TAG=$IMAGE_NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "REPO_BRANCH=$REPO_BRANCH" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "SERVICE_REVISION_SUFFIX=$SERVICE_REVISION_SUFFIX" >> "$GITHUB_OUTPUT"

          echo "GitHub repo owner                   : vars.REPO_OWNER"
          echo "GitHub repo                         : vars.REPO_NAME_CLIENT"
          echo "GitHub extracted latest tag         : $TAG"
          echo "GitHub repo branch to checkout      : $REPO_BRANCH"
          echo "Deployment for                      : $DEPLOYMENT_FOR"
          echo "GCP Artifact Registry repo to push  : $ENVIRONMENT"
          echo "Container image name                : $IMAGE_NAME"
          echo "Container image nametag             : $IMAGE_NAME_TAG"
          echo "Service name                        : $SERVICE_NAME"
          echo "Service revision suffix             : $SERVICE_REVISION_SUFFIX"
          echo "Service container port to expose    : ${{  vars.CONTAINER_PORT_CLIENT  }}"
      ######################################################################### 
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_CLIENT }}
          ref: ${{ steps.metadata.outputs.REPO_BRANCH }}
          path: ${{ vars.REPO_NAME_CLIENT }}
      #######################################################################
      - name: Build Docker Image
        run: |
          cd ${{ vars.REPO_NAME_CLIENT }}
          docker build -t ${{ steps.metadata.outputs.IMAGE_URI }} ./app
      #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
      #######################################################################
      - name: Push to Artifact Registry
        run: |
          docker push ${{ steps.metadata.outputs.IMAGE_URI }}
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs:
      - image-api
      - image-client
    steps:
      - name: Mapping data for Terraform
        id: tfdata
        run: |
          GCP='{ "project_id": "${{ secrets.GCP_PROJECT_ID }}", \
                "region": "${{ secrets.GCP_REGION }}" }'
          API_SERVICE='{"name": "${{ needs.image-api.outputs.SERVICE_NAME }}", \
                        "revision_suffix": "${{ needs.image-api.outputs.SERVICE_REVISION_SUFFIX }}", \
                        "environment": "${{ needs.image-api.outputs.ENVIRONMENT }}", \
                        "app": "${{ secrets.GCP_PROJECT_ID }}", \
                        "image_uri": "${{ needs.image-api.outputs.IMAGE_URI }}", \
                        "container_port": "${{ vars.CONTAINER_PORT_API }}"}'
          CLIENT_SERVICE='{"name": "${{ needs.image-client.outputs.SERVICE_NAME }}", \
                          "revision_suffix": "${{ needs.image-client.outputs.SERVICE_REVISION_SUFFIX }}", \
                          "environment": "${{ needs.image-client.outputs.ENVIRONMENT }}", \
                          "app": "${{ secrets.GCP_PROJECT_ID }}", \
                          "image_uri": "${{ needs.image-client.outputs.IMAGE_URI }}", \
                          "container_port": "${{ vars.CONTAINER_PORT_CLIENT }}"}'
          # GCP=$(  jq -n \
          #           --arg project_id "${{ secrets.GCP_PROJECT_ID }}" \
          #           --arg region "${{ secrets.GCP_REGION }}" \
          #           '{ project_id: $project_id, region: $region }'  
          #      )
          # API_SERVICE=$(  jq -n \
          #                     --arg name "${{ needs.image-api.outputs.SERVICE_NAME }}" \
          #                     --arg revision_suffix "${{ needs.image-api.outputs.SERVICE_REVISION_SUFFIX }}" \
          #                     --arg environment "${{ needs.image-api.outputs.ENVIRONMENT }}" \
          #                     --arg app "${{ secrets.GCP_PROJECT_ID }}" \
          #                     --arg image_uri "${{ needs.image-api.outputs.IMAGE_URI }}" \
          #                     --arg container_port "${{ vars.CONTAINER_PORT_API }}" \
          #                     '$ARGS.named'  
          #               )
          # CLIENT_SERVICE=$( jq -n \
          #                       --arg name "${{ needs.image-client.outputs.SERVICE_NAME }}" \
          #                       --arg revision_suffix "${{ needs.image-client.outputs.SERVICE_REVISION_SUFFIX }}" \
          #                       --arg environment "${{ needs.image-client.outputs.ENVIRONMENT }}" \
          #                       --arg app "${{ secrets.GCP_PROJECT_ID }}" \
          #                       --arg image_uri "${{ needs.image-client.outputs.IMAGE_URI }}" \
          #                       --arg container_port "${{ vars.CONTAINER_PORT_CLIENT }}" \
          #                       '$ARGS.named' 
          #                 )

          echo $GCP
          echo $API_SERVICE
          echo $CLIENT_SERVICE
                                
          echo "GCP=$GCP" >> "$GITHUB_OUTPUT"
          echo "API_SERVICE=$API_SERVICE" >> "$GITHUB_OUTPUT"
          echo "CLIENT_SERVICE=$CLIENT_SERVICE" >> "$GITHUB_OUTPUT"
      #######################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      #######################################################################
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
      #######################################################################
      - name: Terraform Init and Apply
        run: |
          cd terraform_configurations
          terraform init
          terraform apply -auto-approve \
            -var='gcp=${{ steps.tfdata.outputs.GCP }}' \
            -var='api_service=${{ steps.tfdata.outputs.API_SERVICE }}' \
            -var='client_service=${{ steps.tfdata.outputs.CLIENT_SERVICE }}'