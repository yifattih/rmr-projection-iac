name: Deployment Pipeline

env:
    ARTIFACT_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
    IMAGE_REPO_URL: "$ARTIFACT_REGISTRY/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REGISTRY_REPO_NAME }}"

on:
  workflow_dispatch:

jobs:
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
  image-api:
    name: Checkout, Build and Push API Image
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      NAME_TAG: ${{ steps.image_name_tag.outputs.NAME_TAG }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_API }}
          path: ${{ vars.REPO_NAME_API }}
        #######################################################################
      - name: Extract the latest repo release tag
        id: repo_tag
        run: |
          repo_url=https://github.com/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_API }}.git
          LATEST_TAG=$(git ls-remote --tags $repo_url | sort -u -r | head -n 1 | grep -o "v.*")
          echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "${{ vars.REPO_NAME_API }} Latest Tag :::   $LATEST_TAG"
        #######################################################################
      - name: Create imagename:tag and export to outputs
        id: image_name_tag
        run: |
          NAME=api
          TAG=${{ steps.repo_tag.outputs.LATEST_TAG }}
          NAME_TAG=$NAME:$TAG
          echo "NAME_TAG=$NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "Image name:tag ::: $NAME_TAG"
        #######################################################################
      - name: Build Docker Image
        run: |
          NAME_TAG=${{ steps.image_name_tag.outputs.NAME_TAG }}
          IMAGE=${{ env.IMAGE_REPO_URL }}/$NAME_TAG
          echo "IMAGE=$IMAGE" >> "$GITHUB_OUTPUT"

          cd ${{ vars.REPO_NAME_API }}
          docker build -t $IMAGE ./api_service
        #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        #######################################################################
      - name: Push to Artifact Registry
        run: docker push $IMAGE
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
  image-webapp:
    name: Checkout, Build and Push Webapp Image
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      NAME_TAG: ${{ steps.image_name_tag.outputs.NAME_TAG }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_WEBAPP }}
          path: ${{ vars.REPO_NAME_WEBAPP }}
        #######################################################################
      - name: Extract the latest repo release tag
        id: repo_tag
        run: |
          repo_url=https://github.com/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_WEBAPP }}.git
          LATEST_TAG=$(git ls-remote --tags $repo_url | sort -u -r | head -n 1 | grep -o "v.*")
          echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "${{ vars.REPO_NAME_WEBAPP }} ::: latest tag :::   $LATEST_TAG"
        #######################################################################
      - name: Create imagename:tag and export to outputs
        id: image_name_tag
        run: |
          NAME=webapp
          TAG=${{ steps.repo_tag.outputs.LATEST_TAG }}
          NAME_TAG=$NAME:$TAG
          echo "NAME_TAG=$NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "Image name tag: $NAME_TAG"
        #######################################################################
      - name: Build Docker Image
        run: |
          NAME_TAG=${{ steps.image_name_tag.outputs.NAME_TAG }}
          IMAGE=${{ env.IMAGE_REPO_URL }}/$NAME_TAG
          echo "IMAGE=$IMAGE" >> "$GITHUB_OUTPUT"

          cd ${{ vars.REPO_NAME_WEBAPP }}
          docker build -t $IMAGE ./app
        #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        #######################################################################
      - name: Push to Artifact Registry
        run: docker push $IMAGE
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs:
      - image-api
      - image-webapp

    steps:
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Deploy Terraform
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="service_names=[\"api\", \"webapp\"]" \
            -var="artifact_registry_name=${{ secrets.REGISTRY_REPO_NAME }}" \
            -var="image_repo_url=${{ env.IMAGE_REPO_URL }}" \
            -var="image_name_tags={\"api\":\"${{ needs.image-api.outputs.NAME_TAG }}\", \"webapp\":\"${{ needs.image-webapp.outputs.NAME_TAG }}\"}"