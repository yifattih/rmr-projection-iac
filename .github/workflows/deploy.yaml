name: Deployment Pipeline

env:
    ARTIFACT_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
    IMAGE_REPO_URL: "$ARTIFACT_REGISTRY/${{ secrets.GCP_PROJECT_ID }}"

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  image-api:
    name: "API: Construct Metadata, Checkout Code, Build Image and Push"
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{  steps.metadata.outputs.SERVICE_NAME  }}
      ENVIRONMENT: ${{ steps.metadata.outputs.ENVIRONMENT }}
      IMAGE_NAME_TAG: ${{ steps.metadata.outputs.IMAGE_NAME_TAG }}
    steps:
      - name: Extract information and construct metadata
        id: metadata
        run: |
          account_url="https://github.com/${{ vars.REPO_OWNER }}"
          repo_url="$account_url/${{ vars.REPO_NAME_API }}.git"

          TAG="$(git ls-remote --tags $repo_url | grep -o "v.*" | sort -u -r | head -n 1)"

          if echo $TAG | grep -q "alpha"; then
              REPO_BRANCH="alpha"
              ENVIRONMENT="alpha"
              DEPLOYMENT_FOR="alpha testing environment"
          else
              REPO_BRANCH="main"
              ENVIRONMENT="production"
              DEPLOYMENT_FOR="production environment"
          fi

          IMAGE_NAME="api"
          IMAGE_NAME_TAG="$IMAGE_NAME:$TAG"
          IMAGE_URI="${{ env.IMAGE_REPO_URL }}/$ENVIRONMENT/$IMAGE_NAME_TAG"

          SERVICE_NAME="$IMAGE_NAME-$ENVIRONMENT"
          SERVICE_REVISION_SUFFIX="$TAG"

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME_TAG=$IMAGE_NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "REPO_BRANCH=$REPO_BRANCH" >> "$GITHUB_OUTPUT"
          echo "SERVICE_NAME=$SERVICE_NAME" >> "$GITHUB_OUTPUT"
          echo "SERVICE_REVISION_SUFFIX=$SERVICE_REVISION_SUFFIX" >> "$GITHUB_OUTPUT"

          echo "GitHub repo owner                   : ${{  vars.REPO_OWNER  }}"
          echo "GitHub repo                         : ${{  vars.REPO_NAME_API  }}"
          echo "GitHub extracted latest tag         : $TAG"
          echo "GitHub repo branch to checkout      : $REPO_BRANCH"
          echo "Deployment for                      : $DEPLOYMENT_FOR"
          echo "GCP Artifact Registry repo to push  : $ENVIRONMENT"
          echo "Container image name                : $IMAGE_NAME"
          echo "Container image nametag             : $IMAGE_NAME_TAG"
          echo "Image URI"                          : $IMAGE_URI
          echo "Service name                        : $SERVICE_NAME"
          echo "Service revision suffix             : $SERVICE_REVISION_SUFFIX"
          echo "Service container port to expose    : ${{  vars.CONTAINER_PORT_API  }}"
      ######################################################################### 
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_API }}
          ref: ${{ steps.metadata.outputs.REPO_BRANCH }}
          path: ${{ vars.REPO_NAME_API }}
        #######################################################################
      - name: Build Docker Image
        run: |
          cd ${{ vars.REPO_NAME_API }}
          docker build -t ${{ steps.metadata.outputs.IMAGE_URI }} ./api_service
        #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        #######################################################################
      - name: Push to Artifact Registry
        run: |
          docker push ${{ steps.metadata.outputs.IMAGE_URI }}
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  image-client:
    name: "Client: Construct Metadata, Checkout Code, Build Image and Push"
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{  steps.metadata.outputs.SERVICE_NAME  }}
      ENVIRONMENT: ${{ steps.metadata.outputs.ENVIRONMENT }}
      IMAGE_NAME_TAG: ${{ steps.metadata.outputs.IMAGE_NAME_TAG }}
    steps:
      - name: Extract information, Construct Metadata, and Log
        id: metadata
        run: |
          account_url="https://github.com/${{ vars.REPO_OWNER }}"
          repo_url="$account_url/${{ vars.REPO_NAME_CLIENT }}.git"

          TAG="$(git ls-remote --tags $repo_url | grep -o "v.*" | sort -u -r | head -n 1)"

          if echo $TAG | grep -q "alpha"; then
              REPO_BRANCH="alpha"
              ENVIRONMENT="alpha"
              DEPLOYMENT_FOR="alpha testing environment"
          else
              REPO_BRANCH="main"
              ENVIRONMENT="production"
              DEPLOYMENT_FOR="production environment"
          fi

          IMAGE_NAME="client"
          IMAGE_NAME_TAG="$IMAGE_NAME:$TAG"
          IMAGE_URI="${{ env.IMAGE_REPO_URL }}/$ENVIRONMENT/$IMAGE_NAME_TAG"
          SERVICE_NAME="$IMAGE_NAME-$ENVIRONMENT"
          SERVICE_REVISION_SUFFIX="$TAG"

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME_TAG=$IMAGE_NAME_TAG" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "REPO_BRANCH=$REPO_BRANCH" >> "$GITHUB_OUTPUT"
          echo "SERVICE_NAME=$SERVICE_NAME" >> "$GITHUB_OUTPUT"
          echo "SERVICE_REVISION_SUFFIX=$SERVICE_REVISION_SUFFIX" >> "$GITHUB_OUTPUT"

          echo "GitHub repo owner                   : vars.REPO_OWNER"
          echo "GitHub repo                         : vars.REPO_NAME_CLIENT"
          echo "GitHub extracted latest tag         : $TAG"
          echo "GitHub repo branch to checkout      : $REPO_BRANCH"
          echo "Deployment for                      : $DEPLOYMENT_FOR"
          echo "GCP Artifact Registry repo to push  : $ENVIRONMENT"
          echo "Container image name                : $IMAGE_NAME"
          echo "Container image nametag             : $IMAGE_NAME_TAG"
          echo "Image URI"                          : $IMAGE_URI
          echo "Service name                        : $SERVICE_NAME"
          echo "Service revision suffix             : $SERVICE_REVISION_SUFFIX"
          echo "Service container port to expose    : ${{  vars.CONTAINER_PORT_CLIENT  }}"
      ######################################################################### 
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME_CLIENT }}
          ref: ${{ steps.metadata.outputs.REPO_BRANCH }}
          path: ${{ vars.REPO_NAME_CLIENT }}
      #######################################################################
      - name: Build Docker Image
        run: |
          cd ${{ vars.REPO_NAME_CLIENT }}
          docker build -t ${{ steps.metadata.outputs.IMAGE_URI }} ./app
      #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      #######################################################################
      - name: Configure Docker to use gcloud
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
      #######################################################################
      - name: Push to Artifact Registry
        run: |
          docker push ${{ steps.metadata.outputs.IMAGE_URI }}
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  # ///////////////////////////////////////////////////////////////////////////
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs:
      - image-api
      - image-client
    steps:
      - name: Log data that will be passed for Terraform
        run: |
          echo 'project_id                  : ${{ secrets.GCP_PROJECT_ID }}' \
          echo 'region                      : ${{ secrets.GCP_REGION }}' \
          echo 'api_service_name            : ${{ needs.image-api.outputs.SERVICE_NAME }}' \
          echo 'api_environment             : ${{ needs.image-api.outputs.ENVIRONMENT }}' \
          echo 'api_name_tag'               : ${{ needs.image-api.outputs.IMAGE_NAME_TAG }} \
          echo 'api_container_port          : ${{ vars.CONTAINER_PORT_API }}' \
          echo 'client_service_name         : ${{ needs.image-client.outputs.SERVICE_NAME }}' \
          echo 'client_environment          : ${{ needs.image-client.outputs.ENVIRONMENT }}' \
          echo 'client_name_tag'            : ${{ needs.image-client.outputs.IMAGE_NAME_TAG }} \
          echo 'client_container_port       : ${{ vars.CONTAINER_PORT_CLIENT }}'
      #######################################################################
      - name: Construct data maps for Terraform
        id: tfdata
        run: |
          gcp_data='{"project_id"=${{ secrets.GCP_PROJECT_ID }}, \
                    "region"=${{ secrets.GCP_REGION }}}'
      #######################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      #######################################################################
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      #######################################################################
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
      #######################################################################
      - name: Terraform Init and Apply
        run: |
          cd terraform
          terraform init
          terraform force-unlock -force 1734909220686470
          terraform apply -auto-approve \
            -var="gcp_data=${{ steps.tfdata.outputs.gcp_data }}" \
            # -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            # -var="region=${{ secrets.GCP_REGION }}" \
            -var="service_account_name=${{ secrets.SERVICE_ACCOUNT_NAME }}" \
            -var="api_service_name=${{ needs.image-api.outputs.SERVICE_NAME }}" \
            -var="api_environment=${{ needs.image-api.outputs.ENVIRONMENT }}" \
            -var="api_image_name_tag=${{ needs.image-api.outputs.IMAGE_NAME_TAG }}" \
            -var="api_container_port=${{ vars.CONTAINER_PORT_API }}" \
            -var="client_service_name=${{ needs.image-client.outputs.SERVICE_NAME }}" \
            -var="client_environment=${{ needs.image-client.outputs.ENVIRONMENT }}" \
            -var="client_image_name_tag=${{ needs.image-client.outputs.IMAGE_NAME_TAG }}" \
            -var="client_container_port=${{ vars.CONTAINER_PORT_CLIENT }}"